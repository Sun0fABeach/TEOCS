// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU. Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * The bit-combinations that yield each function are 
 * documented in the book. In addition, the ALU 
 * computes two 1-bit outputs: if the ALU output
 * is 0, zr is set to 1; otherwise zr is set to 0;
 * If out<0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU manipulates the x and y
// inputs and then operates on the resulting values, 
// as follows:
// if (zx==1) set x = 0        // 16-bit constant
// if (nx==1) set x = ~x       // bitwise "not"
// if (zy==1) set y = 0        // 16-bit constant
// if (ny==1) set y = ~y       // bitwise "not"
// if (f==1)  set out = x + y  // integer 2's complement addition
// if (f==0)  set out = x & y  // bitwise "and"
// if (no==1) set out = ~out   // bitwise "not"
// if (out==0) set zr = 1
// if (out<0) set ng = 1

  
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute  out = x + y (if 1) or out = x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out==0), 0 otherwise
        ng; // 1 if (out<0),  0 otherwise

    PARTS:
	/* x, y manipulation */
	And16(a=x, b[0..15]=false, out=zerox);	//zeroing x
	Mux16(a=x, b=zerox, sel=zx, out=xor0);
	Not16(in=xor0, out=notx);				//negating x
	Mux16(a=xor0, b=notx, sel=nx, out=finalx);

	And16(a=y, b[0..15]=false, out=zeroy);	//zeroing y
	Mux16(a=y, b=zeroy, sel=zy, out=yor0);
	Not16(in=yor0, out=noty);				//negating y
	Mux16(a=yor0, b=noty, sel=ny, out=finaly);

	/* addition/anding selection */
	And16(a=finalx, b=finaly, out=xandy);
	Add16(a=finalx, b=finaly, out=xplusy);
	Mux16(a=xandy, b=xplusy, sel=f, out=xy);

	/* optional output negation */
	Not16(in=xy, out=nxy);
	Mux16(a=xy, b=nxy, sel=no, out[15]=ng, out[0..7]=o1, out[8..15]=o2, out=out);

	/* out is 0? */
	Or8Way(in=o1, out=part1);
	Or8Way(in=o2, out=part2);
	Or(a=part1, b=part2, out=nzr);
	Not(in=nzr, out=zr);
}
